version: "3.7"
networks:
  redpanda_network:
    driver: bridge
volumes:
  redpanda: null

services:
  redpanda:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.2
    volumes:
      - redpanda:/var/lib/redpanda/data
    networks:
      - redpanda_network
    ports:
      - 18082:18082
      - 19092:19092
      - 19644:9644
  console:
    image: docker.redpanda.com/redpandadata/console:v2.5.2
    networks:
      - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - 8080:8080
    depends_on:
      - redpanda

  postgres:
    image: postgres:14-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=Aa123456!
      - POSTGRES_USER=postgres
      - POSTGRES_DB=songs_db
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - redpanda_network  

  api-server:
    # image: node:20-alpine  
    # working_dir: /app
    build:
      context: ./api-server
      dockerfile: Dockerfile 
    volumes:
      - ./api-server:/app  
    ports:
      - 5000:5000
    environment:
      - PORT=5000
      - KAFKA_CONNECTION=redpanda:9092
    networks:
      - redpanda_network
    depends_on:
      - redpanda  
    ##command: sh -c "npm install && npm start"

  consumer:
    build:
      context: ./consumer-server
      dockerfile: Dockerfile
    volumes:
      - ./consumer-server:/app
    ports:
      - '4000:4000'
    environment:
      - PORT=4000
      - KAFKA_CONNECTION=redpanda:9092
    networks:
      - redpanda_network  
    depends_on:
      - redpanda
      - postgres

  lyrics-server:
    image: node:20-alpine 
    working_dir: /app
    volumes:
      - ./lyrics-server:/app 
    ports:
      - 3000:3000 
    environment:
      - PORT=3000 
    command: sh -c "npm install && npm start"